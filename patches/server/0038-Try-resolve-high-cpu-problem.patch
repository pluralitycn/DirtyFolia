From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: killerprojecte <admin@fastmcmirror.org>
Date: Wed, 5 Jul 2023 18:07:26 +0800
Subject: [PATCH] Try resolve high cpu problem


diff --git a/src/main/java/dev/rgbmc/folia/CachedWorldData.java b/src/main/java/dev/rgbmc/folia/CachedWorldData.java
index 9533fb470a4d42d4de644f2837ee2243bfedabfc..85515235d59669db0dc189438af85759c3f3b81e 100644
--- a/src/main/java/dev/rgbmc/folia/CachedWorldData.java
+++ b/src/main/java/dev/rgbmc/folia/CachedWorldData.java
@@ -7,14 +7,10 @@ import java.util.Map;
 import java.util.concurrent.CompletableFuture;
 
 public class CachedWorldData {
-    private static Map<String, RegionizedWorldData> cachedData = new HashMap<>();
+    private static final Map<String, RegionizedWorldData> cachedData = new HashMap<>();
 
     public static void update(String world, RegionizedWorldData data) {
-        CompletableFuture<Void> future = CompletableFuture.supplyAsync(() -> {
-            cachedData.put(world, data);
-            return null;
-        });
-        future.thenAcceptAsync(v -> {});
+        cachedData.put(world, data);
     }
 
     public static RegionizedWorldData get(String world) {
diff --git a/src/main/java/io/papermc/paper/threadedregions/TickRegionScheduler.java b/src/main/java/io/papermc/paper/threadedregions/TickRegionScheduler.java
index c3a2f62cbb87d23f9ed21eabd9eb43973c85cb7f..4042062f6303a02448e6548bc61ba11b64178539 100644
--- a/src/main/java/io/papermc/paper/threadedregions/TickRegionScheduler.java
+++ b/src/main/java/io/papermc/paper/threadedregions/TickRegionScheduler.java
@@ -67,7 +67,7 @@ public final class TickRegionScheduler {
         tickThreadRunner.currentTickingRegion = region;
         if (region != null) {
             tickThreadRunner.currentTickingWorldRegionizedData = region.regioniser.world.worldRegionData.get();
-            CachedWorldData.update(region.getData().world.serverLevelData.getLevelName(), tickThreadRunner.currentTickingWorldRegionizedData);
+            //CachedWorldData.update(region.getData().world.serverLevelData.getLevelName(), tickThreadRunner.currentTickingWorldRegionizedData);
             //MinecraftServer.LOGGER.info("Cached World " + region.regioniser.world.getWorld().getName() + " data when initializing it");
         } else {
             tickThreadRunner.currentTickingWorldRegionizedData = null;
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 0358f7d026c3fd519b9871515f55b1965f43fd93..77ea6cf7b702675e89aab67d4d9994c94f36d3dc 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -1499,8 +1499,6 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             }
             // now tick connections
             region.world.getCurrentWorldData().tickConnections(); // Folia - region threading
-            // DirtyFolia cache work data
-            CachedWorldData.update(region.world.serverLevelData.getLevelName(), region.world.getCurrentWorldData());
         }
         // Folia end - region threading
 
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index 739a849b1ec94a9b1541a887c99cde6961d2e4d5..db03ecdd5ba2a9ec256247bc4a3915e2f0678557 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -262,8 +262,6 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
             if (this instanceof ServerLevel serverLevel) {
                 ret = CachedWorldData.get(serverLevel.serverLevelData.getLevelName());
             }
-        } else {
-            CachedWorldData.update(ret.world.serverLevelData.getLevelName(), ret);
         }
         if (world != this) {
             throw new IllegalStateException("World mismatch: expected " + this.getWorld().getName() + " but got " + world.getWorld().getName());
