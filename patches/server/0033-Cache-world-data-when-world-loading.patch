From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: killerprojecte <admin@fastmcmirror.org>
Date: Fri, 30 Jun 2023 20:34:22 +0800
Subject: [PATCH] Cache world data when world loading


diff --git a/src/main/java/io/papermc/paper/threadedregions/TickRegionScheduler.java b/src/main/java/io/papermc/paper/threadedregions/TickRegionScheduler.java
index ee9f5e1f3387998cddbeb1dc6dc6e2b1ea7cd670..70cc11031e5ed5d9c4c5e68aca9a1b795f4912ab 100644
--- a/src/main/java/io/papermc/paper/threadedregions/TickRegionScheduler.java
+++ b/src/main/java/io/papermc/paper/threadedregions/TickRegionScheduler.java
@@ -3,6 +3,7 @@ package io.papermc.paper.threadedregions;
 import ca.spottedleaf.concurrentutil.scheduler.SchedulerThreadPool;
 import ca.spottedleaf.concurrentutil.util.TimeUtil;
 import com.mojang.logging.LogUtils;
+import dev.rgbmc.folia.CachedWorldData;
 import io.papermc.paper.util.TickThread;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.ServerLevel;
@@ -66,6 +67,8 @@ public final class TickRegionScheduler {
         tickThreadRunner.currentTickingRegion = region;
         if (region != null) {
             tickThreadRunner.currentTickingWorldRegionizedData = region.regioniser.world.worldRegionData.get();
+            CachedWorldData.update(region.regioniser.world.getWorld().getName(), tickThreadRunner.currentTickingWorldRegionizedData);
+            //MinecraftServer.LOGGER.info("Cached World " + region.regioniser.world.getWorld().getName() + " data when initializing it");
         } else {
             tickThreadRunner.currentTickingWorldRegionizedData = null;
         }
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index e18204d3f351198fbc41d5de9d9da9417775ade1..7115d199d6b2effef9a50900767d4cf920d4f0bc 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -1,5 +1,6 @@
 package net.minecraft.server;
 
+import ca.spottedleaf.concurrentutil.executor.standard.PrioritisedExecutor;
 import co.aikar.timings.MinecraftTimings;
 import com.google.common.base.Preconditions;
 import com.google.common.base.Splitter;
@@ -99,6 +100,7 @@ import net.minecraft.world.level.validation.ContentValidationException;
 import net.minecraft.world.phys.Vec2;
 import net.minecraft.world.phys.Vec3;
 import org.bukkit.Bukkit;
+import org.bukkit.Chunk;
 import org.bukkit.command.ConsoleCommandSender;
 import org.bukkit.event.server.ServerLoadEvent;
 import org.slf4j.Logger;
@@ -1452,6 +1454,10 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
                         LOGGER.info("Initialising world '" + region.world.getWorld().getName() + "' before it can be ticked...");
                         this.initWorld(region.world, region.world.serverLevelData, worldData, region.world.serverLevelData.worldGenOptions()); // Folia - delayed until first tick of world
                         region.world.checkInitialised.set(ServerLevel.WORLD_INIT_CHECKED);
+                        // DirtyFolia - Start
+                        CachedWorldData.update(region.world.getWorld().getName(), region.world.getCurrentWorldData());
+                        MinecraftServer.LOGGER.info("World " + region.world.getWorld().getName() + " data status: " + (CachedWorldData.get(region.world.getWorld().getName()) == null ? "(Unavailable)" : "(Cached)"));
+                        // DirtyFolia - End
                         LOGGER.info("Initialised world '" + region.world.getWorld().getName() + "'");
                     } // else: must be checked
                 }
